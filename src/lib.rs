const WIDTH: usize = 3;
const HEIGHT: usize = 3;

type Pixel = (u8, u8, u8);
type Image = [[Pixel; WIDTH]; HEIGHT];

const CGA_PALETTE: [Pixel; 16] = [
    (0x00, 0x00, 0x00),
    (0x00, 0x00, 0xAA),
    (0x00, 0xAA, 0x00),
    (0x00, 0xAA, 0xAA),
    (0x55, 0x55, 0x55),
    (0x55, 0x55, 0xFF),
    (0x55, 0xFF, 0x55),
    (0x55, 0xFF, 0xFF),
    (0xAA, 0x00, 0x00),
    (0xAA, 0x00, 0xAA),
    (0xAA, 0x55, 0x00),
    (0xAA, 0xAA, 0xAA),
    (0xFF, 0x55, 0x55),
    (0xFF, 0x55, 0xFF),
    (0xFF, 0xFF, 0x55),
    (0xFF, 0xFF, 0xFF),
];

fn closest(pixel: Pixel) -> Pixel {
    CGA_PALETTE.into_iter().min_by_key(|cga|
        (pixel.0.abs_diff(cga.0) as u32).pow(2) +
        (pixel.1.abs_diff(cga.1) as u32).pow(2) +
        (pixel.2.abs_diff(cga.2) as u32).pow(2)
    ).unwrap()
}

#[test]
fn test_closest() {
    assert_eq!(closest((0xbb, 0xbb, 0xcc)), (0xaa, 0xaa, 0xaa))
}
